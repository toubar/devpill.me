<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>smart contracts on</title><link>https://devpill-me.vercel.app/docs/smart-contract-development/</link><description>Recent content in smart contracts on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Wed, 09 Mar 2022 08:47:36 +0000</lastBuildDate><atom:link href="https://devpill-me.vercel.app/docs/smart-contract-development/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://devpill-me.vercel.app/docs/smart-contract-development/introduction/</link><pubDate>Wed, 09 Mar 2022 08:47:36 +0000</pubDate><guid>https://devpill-me.vercel.app/docs/smart-contract-development/introduction/</guid><description>Writing decentralized applications (Dapps) requires knowing how to write smart contracts as they are pieces of code that live on blockchains that can be executed inside of virtual machines. To write contracts you need to learn the programming languages that are able to compile to a target that the virtual machine can understand. In the case of the Ethereum blockchain, we have the EVM which has a set of operations it supports (a.</description></item><item><title>Solidity</title><link>https://devpill-me.vercel.app/docs/smart-contract-development/solidity/</link><pubDate>Wed, 09 Mar 2022 08:47:36 +0000</pubDate><guid>https://devpill-me.vercel.app/docs/smart-contract-development/solidity/</guid><description>Solidity is by far the most popular language to write smart contracts at the moment as the EVM is the most widely adopted virtual machine out there. Not only is it used in Ethereum&amp;rsquo;s execution layer, but many alt L1s and L2s on Ethereum use the EVM as their virtual machine since there&amp;rsquo;s a fairly mature development ecosystem. In order to first learn Solidity, we&amp;rsquo;ll go over a few simple courses that explain the principles of the language, and as we progress further we will talk about design patterns, testing, security, oracles, and more.</description></item><item><title>Oracles</title><link>https://devpill-me.vercel.app/docs/smart-contract-development/oracles/</link><pubDate>Wed, 09 Mar 2022 08:47:36 +0000</pubDate><guid>https://devpill-me.vercel.app/docs/smart-contract-development/oracles/</guid><description>Oracles are data feeds that bring off-chain data on-chain so that the smart contracts that you build can query real-world information and build logic around it. For example, prediction market Dapps use oracles to settle payments based on events. A prediction market may ask you to bet your ETH on who will become the next president of the United States. They&amp;rsquo;ll use an oracle to confirm the outcome and payout to the winners.</description></item><item><title>Testing</title><link>https://devpill-me.vercel.app/docs/smart-contract-development/testing/</link><pubDate>Wed, 09 Mar 2022 08:47:36 +0000</pubDate><guid>https://devpill-me.vercel.app/docs/smart-contract-development/testing/</guid><description>Testing smart contracts is an essential part of the development process as it ensures that the code you write behaves as intended and is secure against various technical and economic exploits. Many different libraries are used by different teams, there are pros and cons to using each different library and in some cases, they can be used in a complementary fashion. We will cover the most popular ones among top-tier developers as well as the most commonly used ones like HardHat and Truffle.</description></item><item><title>Design patterns</title><link>https://devpill-me.vercel.app/docs/smart-contract-development/design-patterns/</link><pubDate>Wed, 09 Mar 2022 08:47:36 +0000</pubDate><guid>https://devpill-me.vercel.app/docs/smart-contract-development/design-patterns/</guid><description>Once you&amp;rsquo;re comfortable with writing more and more complex contracts and maybe taking a look at the front-end code and it interacts with the smart contracts, you&amp;rsquo;ll start getting a feel for how smart contracts are designed from a more high-level view. There are certain designs and patterns which are commonplace, things like the approved pattern for tokens, and more. At this point, it is a good idea to start thinking more about the overall architecture of your code and the structure that it will take to efficiently implement the functionality you want to enable.</description></item><item><title>Specialized languages</title><link>https://devpill-me.vercel.app/docs/smart-contract-development/specialized-languages/</link><pubDate>Wed, 09 Mar 2022 08:47:36 +0000</pubDate><guid>https://devpill-me.vercel.app/docs/smart-contract-development/specialized-languages/</guid><description>There are various programming languages that can be compiled into EVM bytecode, there are high-level programming languages such as Solidity, Vyper, or Fe, but there&amp;rsquo;s also an intermediate programming language that&amp;rsquo;s often used within gas-optimized contracts called Yul, or as a developer, you can write EVM assembly by writing the EVM opcodes directly. A common technique for gas minimization is writing Solidity code looking at the resulting EVM assembly code and comparing the gas cost of different implementations in order to make the contract as gas-efficient as possible.</description></item><item><title>EVM deep dive</title><link>https://devpill-me.vercel.app/docs/smart-contract-development/evm-deep-dive/</link><pubDate>Wed, 09 Mar 2022 08:47:36 +0000</pubDate><guid>https://devpill-me.vercel.app/docs/smart-contract-development/evm-deep-dive/</guid><description>Understanding the ins and outs of the EVM is crucial for building highly optimized applications as each operation executed by the EVM has a gas cost attached to it and users have to pay the price for executing functions within the applications that they use. There is a compromise between readability and code optimizations however, which needs to be taken into consideration. Sometimes using techniques like bitshifting and bitmapping (Hacker&amp;rsquo;s Delight is a good book that talks about bit manipulation techniques in detail) can have a negative impact on readability and thus security, as other contributors and auditors may not be able to wrap their heads around these complex optimizations or it would simply take too much time for them to do so.</description></item></channel></rss>